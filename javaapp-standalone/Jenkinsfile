pipeline {
    agent { label 'docker' }

	environment {
        SONARQUBE = credentials('sonar')  // Jenkins credential for token
    }
	
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/devops-sunetra/jenkins.git'
            }
        }

        stage('Build') {
            steps {
                dir('javaapp-standalone') {
                    sh "mvn clean package -DskipTests"
                }
            }
        }

        stage('Test') {
            steps {
                dir('javaapp-standalone') {
                    sh "mvn test"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
				
                withSonarQubeEnv('sonar') {  // must match configured name
                    sh '''
						cd javaapp-standalone
                        mvn sonar:sonar \
                          -Dsonar.projectKey=myapp \
                          -Dsonar.projectName="MyApp" \
                          -Dsonar.host.url=$SONAR_HOST_URL \
                          -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Trivy FS Scan') {
            steps {
                dir('javaapp-standalone') {
                    sh "trivy fs --exit-code 0 --severity HIGH,CRITICAL ."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('javaapp-standalone') {
                    sh "docker build -t myapp:latest ."
                }
            }
        }

        stage('Trivy Image Scan') {
            steps
			{			
                sh """
					export TRIVY_CACHE_DIR=/tmp/trivy
                    trivy image --scanners vuln --exit-code 0 --severity HIGH,CRITICAL myapp:latest
                """
            }
        }

        stage('Push to ECR') {
            steps {
                sh """
                    aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 655445510312.dkr.ecr.ap-south-1.amazonaws.com &&
                    docker tag myapp:latest 655445510312.dkr.ecr.ap-south-1.amazonaws.com/javaapp:latest &&
                    docker push 655445510312.dkr.ecr.ap-south-1.amazonaws.com/javaapp:latest
                """
            }
        }

        stage('Deploy') {
            steps {
                sh """
                    docker stop myapp || true &&
                    docker rm -f myapp || true &&
                    docker pull 655445510312.dkr.ecr.ap-south-1.amazonaws.com/javaapp:latest &&
                    docker run -d --name myapp -p 5000:5000 655445510312.dkr.ecr.ap-south-1.amazonaws.com/javaapp:latest
                """
                script {
                    def PUBLIC_IP = sh(
                        script: "curl -s http://checkip.amazonaws.com",
                        returnStdout: true
                    ).trim()
                    echo "==================================================="
                    echo " Application deployed successfully! ðŸŽ‰"
                    echo " Access it here: http://${PUBLIC_IP}:5000"
                    echo "==================================================="
                }
            }
        }
    }
}
